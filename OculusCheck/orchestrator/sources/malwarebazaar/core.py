# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Mraxzist

from typing import Dict, Iterable, List
from .api import request_api

def normalize_item(it: Dict) -> Dict:
    """
    Convert MalwareBazaar 'data' item into a flat row matching CSV/JSON schema.
    """
    intel = it.get("intelligence") or {}
    clam = it.get("clamav") or intel.get("clamav")
    if isinstance(clam, list):
        clam = ";".join(str(x) for x in clam)

    vtpercent = it.get("vtpercent")
    if vtpercent is None and isinstance(intel, dict):
        vt = intel.get("virustotal")
        if isinstance(vt, dict):
            vtpercent = vt.get("percent") or vt.get("vtpercent")

    return {
        "first_seen_utc": it.get("first_seen") or it.get("first_seen_utc") or "",
        "sha256_hash": it.get("sha256_hash") or "",
        "md5_hash": it.get("md5_hash") or "",
        "sha1_hash": it.get("sha1_hash") or "",
        "reporter": it.get("reporter") or "",
        "file_name": it.get("file_name") or "",
        "file_type_guess": it.get("file_type") or it.get("file_type_guess") or "",
        "mime_type": it.get("file_type_mime") or it.get("mime_type") or "",
        "signature": it.get("signature") or "",
        "clamav": clam or "",
        "vtpercent": "" if vtpercent is None else str(vtpercent),
        "imphash": it.get("imphash") or "",
        "ssdeep": it.get("ssdeep") or "",
        "tlsh": it.get("tlsh") or "",
    }

def get_info_by_hashes(
    session, hashes: Iterable[str], api_key: str, *,
    connect_timeout: float, read_timeout: float, verify_tls: bool
) -> List[Dict]:
    rows: List[Dict] = []
    for h in hashes:
        resp = request_api(
            session, {"query": "get_info", "hash": h}, api_key,
            connect_timeout=connect_timeout, read_timeout=read_timeout, verify_tls=verify_tls
        )
        if resp.get("query_status") in {"hash_not_found", "no_results"}:
            continue
        for it in resp.get("data", []) or []:
            rows.append(normalize_item(it))
    return rows

def get_by_signature(
    session, sig: str, api_key: str, limit: int, *,
    connect_timeout: float, read_timeout: float, verify_tls: bool
) -> List[Dict]:
    resp = request_api(
        session, {"query": "get_siginfo", "signature": sig, "limit": str(min(limit, 1000))}, api_key,
        connect_timeout=connect_timeout, read_timeout=read_timeout, verify_tls=verify_tls
    )
    if resp.get("query_status") in {"signature_not_found", "no_results"}:
        return []
    return [normalize_item(it) for it in (resp.get("data", []) or [])]

def get_recent(
    session, api_key: str, selector: str, *,
    connect_timeout: float, read_timeout: float, verify_tls: bool
) -> List[Dict]:
    resp = request_api(
        session, {"query": "get_recent", "selector": selector}, api_key,
        connect_timeout=connect_timeout, read_timeout=read_timeout, verify_tls=verify_tls
    )
    if resp.get("query_status") in {"no_results"}:
        return []
    return [normalize_item(it) for it in (resp.get("data", []) or [])]
