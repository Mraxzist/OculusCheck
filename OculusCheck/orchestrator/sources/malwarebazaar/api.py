# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Mraxzist

from typing import Dict, Optional
import json
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from ....config import API_URL_MB

def build_session(retries: int = 3, backoff: float = 1.0, proxy: Optional[str] = None) -> requests.Session:
    """
    HTTP session for MalwareBazaar with retry/backoff on 429/5xx.
    """
    s = requests.Session()
    retry = Retry(
        total=retries,
        backoff_factor=backoff,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=frozenset(["POST"]),
        raise_on_status=False,
        respect_retry_after_header=True,
    )
    adapter = HTTPAdapter(max_retries=retry)
    s.mount("https://", adapter)
    s.mount("http://", adapter)
    if proxy:
        s.proxies.update({"http": proxy, "https": proxy})
    return s

version = "1.1"

def request_api(
    session: requests.Session,
    data: Dict,
    api_key: str,
    *,
    connect_timeout: float = 10.0,
    read_timeout: float = 45.0,
    verify_tls: bool = True,
    user_agent: str = f"OculusCheck/{version}"
) -> Dict:
    """
    Low-level POST to MalwareBazaar API. Raises on HTTP error or bad JSON.
    """
    headers = {"User-Agent": user_agent, "Auth-Key": api_key}
    resp = session.post(
        API_URL_MB,
        data=data,
        headers=headers,
        timeout=(connect_timeout, read_timeout),
        verify=verify_tls,
    )
    resp.raise_for_status()
    try:
        return resp.json()
    except json.JSONDecodeError:
        raise RuntimeError(f"Bad JSON from API: {resp.text[:200]}...")
